<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://khoanta-ai.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://khoanta-ai.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-23T03:40:58+00:00</updated><id>https://khoanta-ai.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">[llm-zoomcamp]-intro-01: Introduction to LLMs and RAG</title><link href="https://khoanta-ai.github.io/blog/2024/llm-zoomcamp-01-intro/" rel="alternate" type="text/html" title="[llm-zoomcamp]-intro-01: Introduction to LLMs and RAG"/><published>2024-06-22T00:00:00+00:00</published><updated>2024-06-22T00:00:00+00:00</updated><id>https://khoanta-ai.github.io/blog/2024/llm-zoomcamp-01-intro</id><content type="html" xml:base="https://khoanta-ai.github.io/blog/2024/llm-zoomcamp-01-intro/"><![CDATA[<p><span style="color:red">This is my first experience with the RAG system. If there are any errors, whether in terminology, structure, or understanding, …, please inform me.</span></p> <p>I will share knowledge that I have learn about the first module in <a href="https://github.com/DataTalksClub/llm-zoomcamp/tree/main">llm-zoomcamp course</a> from <a href="https://datatalks.club/">DataTalks.Club</a></p> <p>In this article I will discus about implementing simple Retrieval Augmented Generation (RAG) pipeline to make a Q&amp;A system. This Q&amp;A system can answer questions about the FAQ Documents from the Zoomcamp courses of <a href="https://datatalks.club/">DataTalks.Club</a>. This is just basic knowledge to make a Q&amp;A system base on libraries in Python, and we do not discus about the theory.</p> <h2 id="simple-rag-pipline">Simple RAG pipline</h2> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/posts/llm_zoomcamp/assets/Simple_RAG_Pipeline_Module1-480.webp 480w,/assets/posts/llm_zoomcamp/assets/Simple_RAG_Pipeline_Module1-800.webp 800w,/assets/posts/llm_zoomcamp/assets/Simple_RAG_Pipeline_Module1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/posts/llm_zoomcamp/assets/Simple_RAG_Pipeline_Module1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple RAG Pipline. </div> <p>A simple RAG pipeline might have the following components and stages below</p> <ul> <li>Components: <ul> <li><strong>User:</strong> Who has a question and want to get the answer for this question. (e.g students).</li> <li><strong>Database-DB (Knowledge Base - KB):</strong> It serves as a respository of information (documents) that the system can query to retrieve relevant document or data. (e.g indexed docuemts contained the questions and corresponding answers of the courses)</li> <li><strong>Large Language Model (LLM):</strong> A language model trained on vast amounts of text data, enabling it to perform a wide range of language-related tasks. Receive the a <strong>prompt</strong> and generate more informed and accurate response (answer). <ul> <li><strong>Prompt:</strong> In the scope, it has two elements: user’s question and the context (which is retrieved from the DB). It serves as an input of LLM.</li> </ul> </li> </ul> </li> <li>Generally, there are three stages in a simple RAG pipeline: <ul> <li>Stage 0: We need to build <strong>DB or KB</strong> from the documents and <strong>search engine</strong>. Moreover, we also prepare a <strong>prompt template</strong> to send it to LLM .</li> <li><span style="color:#9673A6">Stage1 (violet):</span> Initially, A user poses a <strong>question</strong>, then sends the question to a built-in <strong>search engine</strong> within the <strong>database</strong>. The <strong>search engine</strong> responds with the <strong>top corresponding contexts</strong> from the <strong>database</strong> to the user.</li> <li><span style="color:red">Stage2 (red):</span> Subsequently, the system constructs a <strong>prompt</strong> using the <strong>template</strong>, which includes <strong>instructions for the LLM</strong> along with the <strong>question</strong> and the <strong>context</strong> retrieved from Stage 1.</li> <li><span style="color:#01A88D">Stage3 (green):</span> Finally, this <strong>prompt</strong> is forwarded to the LLM, which then generates an <strong>answer</strong> that is delivered back to the user.</li> </ul> </li> </ul> <h2 id="preparing-the-environment">Preparing the Environment</h2> <p>I use codespaces of Github (you can use anaconda or miniconda). Click on the <code class="language-plaintext highlighter-rouge">&lt;&gt; Code</code> button \(\rightarrow\) <code class="language-plaintext highlighter-rouge">Codespace</code> tag \(\rightarrow\) new tab is opened and we choose <code class="language-plaintext highlighter-rouge">Open in VS Code Desktop</code></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/posts/llm_zoomcamp/assets/env00-480.webp 480w,/assets/posts/llm_zoomcamp/assets/env00-800.webp 800w,/assets/posts/llm_zoomcamp/assets/env00-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/posts/llm_zoomcamp/assets/env00.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/posts/llm_zoomcamp/assets/env01-480.webp 480w,/assets/posts/llm_zoomcamp/assets/env01-800.webp 800w,/assets/posts/llm_zoomcamp/assets/env01-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/posts/llm_zoomcamp/assets/env01.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Use Codespace of Github with Visual Studio Code </div> <p>Then we run the command below in the terminal:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install tqdm notebook==7.1.2 openai elasticsearch pandas scikit-learn
</code></pre></div></div> <p>For the remainder of this article, we will utilize Jupyter Notebook for coding.</p> <h2 id="build-preparation-functions">Build Preparation Functions</h2> <h3 id="preparing-documents-function">Preparing Documents Function</h3> <p>Firstly, we download the documents and we will format this to generate a DB or KB.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## Download documents.json</span>
<span class="o">!</span>wget https://raw.githubusercontent.com/DataTalksClub/llm-zoomcamp/main/01-intro/documents.json
</code></pre></div></div> <p>The format of <code class="language-plaintext highlighter-rouge">documents.json</code> is as follows:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Example JSON structure:
    [
        {
            "course": "Course Name",
            "documents": [
                {
                    "text": "Document text",
                    "question": "Question related to the document",
                    "section": "Section of the course the document belongs to"
                },
                ...
            ]
        },
        ...
    ]
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">build_documents_from_json(json_path)</code> function converts documents from a JSON format into a list. Each element in the list is a dictionary containing four keys: ‘course’, ‘text’, ‘question’, and ‘section’. To achieve this, the function reads the JSON file specified by json_path. It iterates through each course in the JSON, and for each document within a course, it adds the ‘course’ information from the course dictionary to the document. Finally, it appends each document to a list, which is then returned.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">build_documents_from_json</span><span class="p">(</span><span class="n">json_path</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">
    Convert document json format to a list of
    elements which contain 4 objects: 
    course, text, question, and section
    </span><span class="sh">'''</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">json_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">rt</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f_in</span><span class="p">:</span>
        <span class="n">docs_raw</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f_in</span><span class="p">)</span> 
    <span class="n">documents</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">for</span> <span class="n">course_dict</span> <span class="ow">in</span> <span class="n">docs_raw</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">course_dict</span><span class="p">[</span><span class="sh">'</span><span class="s">documents</span><span class="sh">'</span><span class="p">]:</span>
            <span class="n">doc</span><span class="p">[</span><span class="sh">'</span><span class="s">course</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">course_dict</span><span class="p">[</span><span class="sh">'</span><span class="s">course</span><span class="sh">'</span><span class="p">]</span>
            <span class="n">documents</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">documents</span>
</code></pre></div></div> <p>This function will return a list of dictionary as below:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[
  {
    "course": "Course Name",
    "text": "Document text",
    "question": "Associated question",
    "section": "Document section"
  },
  [
  {
    "course": "Course Name",
    "text": "Document text",
    "question": "Associated question",
    "section": "Document section"
  },
  ...
]
]
</code></pre></div></div> <h3 id="configuring-search-engine-and-indexing-documents-function">Configuring Search Engine and Indexing Documents Function</h3> <p>In this section, we aim to develop a search engine designed to retrieve contexts relevant to the user’s queries.</p> <h4 id="minsearch">Minsearch</h4> <p>Minseatch is a simple search index using TF-IDF and cosine similarity for text fields and exact matching for keyword fields.</p> <p>The provided Python function build_minsearch initializes a search index with specified text and keyword fields, then inxex it with documents to make them searchable.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">build_minsearch</span><span class="p">(</span><span class="n">documents</span><span class="p">,</span> <span class="n">text_fields</span><span class="p">,</span> <span class="n">keyword_fields</span><span class="p">):</span>
    <span class="c1"># SELECT * WHERE course = 'data-engineering-zoomcamp';
</span>    <span class="n">index</span> <span class="o">=</span> <span class="n">minsearch</span><span class="p">.</span><span class="nc">Index</span><span class="p">(</span>
        <span class="n">text_fields</span><span class="o">=</span><span class="n">text_fields</span><span class="p">,</span>
        <span class="n">keyword_fields</span><span class="o">=</span><span class="n">keyword_fields</span>
    <span class="p">)</span>
    <span class="n">index</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">documents</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">index</span>
</code></pre></div></div> <h4 id="elasticsearch">Elasticsearch</h4> <p>The provided code snippet defines two functions for working with Elasticsearch in Python:</p> <p><code class="language-plaintext highlighter-rouge">es_create_index_if_not_exists</code>: This function attempts to create an Elasticsearch index with a given name and configuration. If the index already exists (indicated by a resource_already_exists_exception), the error is ignored, and the function proceeds to index the provided documents. Any other exceptions are raised.</p> <p><code class="language-plaintext highlighter-rouge">build_elastic_search</code>: This function initializes an Elasticsearch client, sets up an index with specified settings, and populates it with documents. It uses the <code class="language-plaintext highlighter-rouge">es_create_index_if_not_exists function</code> to ensure the index is created only if it doesn’t already exist, thus avoiding duplication errors.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">es_create_index_if_not_exists</span><span class="p">(</span><span class="n">es</span><span class="p">,</span> <span class="n">index_name</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">documents</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Create the given ElasticSearch index and ignore error if it already exists</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">es</span><span class="p">.</span><span class="n">indices</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">index_name</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="n">body</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">documents</span><span class="p">):</span>
            <span class="n">es</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">index_name</span><span class="p">,</span> <span class="n">document</span><span class="o">=</span><span class="n">doc</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">elasticsearch</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">RequestError</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">ex</span><span class="p">.</span><span class="n">error</span> <span class="o">==</span> <span class="sh">'</span><span class="s">resource_already_exists_exception</span><span class="sh">'</span><span class="p">:</span>
            <span class="k">pass</span> <span class="c1"># Index already exists. Ignore.
</span>        <span class="k">else</span><span class="p">:</span> <span class="c1"># Other exception - raise it
</span>            <span class="k">raise</span> <span class="n">ex</span>


<span class="k">def</span> <span class="nf">build_elastic_search</span><span class="p">(</span><span class="n">elasticsearch_url</span><span class="p">,</span> <span class="n">documents</span><span class="p">,</span> <span class="n">index_name</span><span class="o">=</span><span class="sh">"</span><span class="s">course-questions</span><span class="sh">"</span><span class="p">):</span>
    <span class="n">index_settings</span> <span class="o">=</span> <span class="nf">config_elastic_search</span><span class="p">()</span>
    <span class="n">es_client</span> <span class="o">=</span> <span class="nc">Elasticsearch</span><span class="p">(</span><span class="n">elasticsearch_url</span><span class="p">)</span> 
    <span class="c1"># es_client.indices.create(index=index_name, body=index_settings)
</span>    <span class="nf">es_create_index_if_not_exists</span><span class="p">(</span><span class="n">es</span><span class="o">=</span><span class="n">es_client</span><span class="p">,</span> <span class="n">index_name</span><span class="o">=</span><span class="n">index_name</span><span class="p">,</span> 
                                  <span class="n">body</span><span class="o">=</span><span class="n">index_settings</span><span class="p">,</span> <span class="n">documents</span><span class="o">=</span><span class="n">documents</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">es_client</span>
</code></pre></div></div> <h3 id="prompt-template-function">Prompt Template Function</h3> <p>Create a prompt template for use with a LLM. Each time a query is submitted to the LLM, incorporate the user’s question and the context retrieved from the search engine into this template.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">build_prompt</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">search_results</span><span class="p">):</span>
    <span class="n">prompt_template</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
You</span><span class="sh">'</span><span class="s">re a course teaching assistant. Answer the QUESTION based on the CONTEXT from the FAQ database.
Use only the facts from the CONTEXT when answering the QUESTION.
QUESTION: {question}
CONTEXT: {context}
</span><span class="sh">"""</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
    
    <span class="n">context</span> <span class="o">=</span> <span class="sh">""</span>
    <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">search_results</span><span class="p">:</span>
        <span class="n">context</span> <span class="o">=</span> <span class="n">context</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">section: </span><span class="si">{</span><span class="n">doc</span><span class="p">[</span><span class="sh">'</span><span class="s">section</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="se">\n</span><span class="s">question: </span><span class="si">{</span><span class="n">doc</span><span class="p">[</span><span class="sh">'</span><span class="s">question</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="se">\n</span><span class="s">answer: </span><span class="si">{</span><span class="n">doc</span><span class="p">[</span><span class="sh">'</span><span class="s">text</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="se">\n\n</span><span class="sh">"</span>
    <span class="n">prompt</span> <span class="o">=</span> <span class="n">prompt_template</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">question</span><span class="o">=</span><span class="n">query</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="n">context</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">prompt</span>
</code></pre></div></div> <h3 id="invoking-openai-api-function-with-ollama">Invoking OpenAI API function with Ollama</h3> <p>Use Ollama with OpenAI API</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">build_llm</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="p">):</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">base_url</span><span class="p">,</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">api_key</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">client</span>
</code></pre></div></div> <h2 id="build-essential-functions">Build Essential Functions</h2> <p>We need a function to index the processed documents above (we can use minsearch or elastic search). Subsequently we build a search function for the search engine and</p> <h3 id="retrieval">Retrieval</h3> <h4 id="minsearch-1">Minsearch</h4> <p>The <code class="language-plaintext highlighter-rouge">minsearch_search</code> function conducts a search using a specified search engine, applying filters and boosts to the query, and limits the results to a specified number. It returns the search results.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## Download minsearch.py</span>
<span class="o">!</span>wget https://raw.githubusercontent.com/alexeygrigorev/minsearch/main/minsearch.py
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">minsearch_search</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">search_engine</span><span class="p">,</span> <span class="n">filter_dict</span><span class="p">,</span> <span class="n">boost_dict</span><span class="p">,</span> <span class="n">num_results</span><span class="p">):</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">search_engine</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span>
        <span class="n">query</span><span class="o">=</span><span class="n">query</span><span class="p">,</span>
        <span class="n">filter_dict</span><span class="o">=</span><span class="n">filter_dict</span><span class="p">,</span>
        <span class="n">boost_dict</span><span class="o">=</span><span class="n">boost_dict</span><span class="p">,</span>
        <span class="n">num_results</span><span class="o">=</span><span class="n">num_results</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">results</span>
</code></pre></div></div> <h4 id="elasticseatch">Elasticseatch</h4> <p>The <code class="language-plaintext highlighter-rouge">elastic_search</code> function receives an index_name (corresponding to a pre-configured index), a configured elastic_query, and an instance of Elasticsearch, then returns the search results.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">elastic_search</span><span class="p">(</span><span class="n">index_name</span><span class="p">,</span> <span class="n">elastic_query</span><span class="p">,</span> <span class="n">es_client</span><span class="p">):</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">es_client</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">index_name</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="n">elastic_query</span><span class="p">)</span>
    <span class="n">result_docs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">hit</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">response</span><span class="p">[</span><span class="sh">'</span><span class="s">hits</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">hits</span><span class="sh">'</span><span class="p">]):</span>
        <span class="n">result_docs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">hit</span><span class="p">[</span><span class="sh">'</span><span class="s">_source</span><span class="sh">'</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">result_docs</span>
</code></pre></div></div> <h3 id="generation-with-llms-openai-api-with-ollama">Generation with LLMs (OpenAI API with Ollama)</h3> <p>The <code class="language-plaintext highlighter-rouge">query_llm</code> function is a Python function designed to query a LLM using a specified client interface. It accepts three parameters: prompt, which is the text input or question to be submitted to the model; client, an instance of the API client that facilitates communication with the LLM service; and model_name, the identifier of the specific language model to be queried. The function works by sending a request to the LLM, structured as a message with the user’s role and the provided prompt. Upon receiving the response, it extracts and returns the content of the first message from the model’s choices. This function encapsulates the interaction with an LLM, making it straightforward to integrate language model capabilities into various applications or services, allowing for dynamic and intelligent text generation based on user inputs.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">query_llm</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="n">client</span><span class="p">,</span> <span class="n">model_name</span><span class="p">):</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">model_name</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span><span class="n">prompt</span><span class="p">}]</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
</code></pre></div></div> <h3 id="run-rag">Run RAG</h3> <p>Finally, we encapsulate three functions corresponding to the three stages depicted in Figure 1 to process a user query within the RAG system. An example how to use the whole code also provided in the subsections below.</p> <h4 id="rag-with-minsearch">RAG with Minsearch</h4> <p><strong>Minsearch Rag Function</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">minsearch_rag</span><span class="p">(</span><span class="n">query</span><span class="p">):</span>
    <span class="n">minsearch_results</span> <span class="o">=</span> <span class="nf">minsearch_search</span><span class="p">(</span><span class="n">query</span><span class="o">=</span><span class="n">query</span><span class="p">,</span> <span class="n">search_engine</span><span class="o">=</span><span class="n">minsearch_engine</span><span class="p">,</span> 
                       <span class="n">filter_dict</span><span class="o">=</span><span class="n">filter_dict</span><span class="p">,</span> <span class="n">boost_dict</span><span class="o">=</span><span class="n">boost_dict</span><span class="p">,</span> 
                       <span class="n">num_results</span><span class="o">=</span><span class="n">num_results</span><span class="p">)</span>
    <span class="n">prompt</span> <span class="o">=</span> <span class="nf">build_prompt</span><span class="p">(</span><span class="n">query</span><span class="o">=</span><span class="n">query</span><span class="p">,</span> <span class="n">search_results</span><span class="o">=</span><span class="n">minsearch_results</span><span class="p">)</span>
    <span class="n">response_res</span> <span class="o">=</span> <span class="nf">query_llm</span><span class="p">(</span><span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">client</span><span class="o">=</span><span class="n">phi3_client</span><span class="p">,</span> <span class="n">model_name</span><span class="o">=</span><span class="n">model_name</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">response_res</span>
</code></pre></div></div> <p>Run RAG with Minsearch</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">json_doc_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">documents.json</span><span class="sh">'</span>
<span class="n">cvt_documents</span> <span class="o">=</span> <span class="nf">build_documents_from_json</span><span class="p">(</span><span class="n">json_doc_path</span><span class="p">)</span>
<span class="c1"># print(cvt_documents)
</span>
<span class="n">text_fields</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">section</span><span class="sh">"</span><span class="p">]</span>
<span class="n">keyword_fields</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">course</span><span class="sh">"</span><span class="p">]</span>
<span class="n">minsearch_engine</span> <span class="o">=</span> <span class="nf">build_minsearch</span><span class="p">(</span><span class="n">cvt_documents</span><span class="p">,</span> <span class="n">text_fields</span><span class="p">,</span> <span class="n">keyword_fields</span><span class="p">)</span>

<span class="n">filter_dict</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">course</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">data-engineering-zoomcamp</span><span class="sh">'</span><span class="p">}</span>
<span class="n">boost_dict</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">question</span><span class="sh">'</span><span class="p">:</span> <span class="mf">3.0</span><span class="p">,</span> <span class="sh">'</span><span class="s">section</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">}</span>
<span class="n">num_results</span> <span class="o">=</span> <span class="mi">5</span>

<span class="n">base_url</span> <span class="o">=</span> <span class="sh">'</span><span class="s">http://localhost:11434/v1/</span><span class="sh">'</span>
<span class="n">api_key</span> <span class="o">=</span> <span class="sh">'</span><span class="s">ollama</span><span class="sh">'</span>
<span class="n">model_name</span> <span class="o">=</span> <span class="sh">'</span><span class="s">phi3</span><span class="sh">'</span>
<span class="n">phi3_client</span> <span class="o">=</span> <span class="nf">build_llm</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="p">)</span>

<span class="nf">minsearch_rag</span><span class="p">(</span><span class="n">query</span><span class="o">=</span> <span class="sh">'</span><span class="s">the course has already started, can I still enroll?</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <h4 id="rag-with-elasticsearch">RAG with Elasticsearch</h4> <p><strong>Elasticsearch RAG Function</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">elastic_rag</span><span class="p">(</span><span class="n">query</span><span class="p">):</span>
    <span class="n">elastic_query</span> <span class="o">=</span> <span class="nf">build_search_query</span><span class="p">(</span><span class="n">num_results</span><span class="o">=</span><span class="n">num_results</span><span class="p">,</span> <span class="n">query</span><span class="o">=</span><span class="n">query</span><span class="p">,</span> 
                                       <span class="n">text_boost_fields</span><span class="o">=</span><span class="n">text_boost_fields</span><span class="p">,</span>
                                       <span class="n">query_type</span><span class="o">=</span><span class="n">query_type</span><span class="p">,</span><span class="n">filter_dict</span><span class="o">=</span><span class="n">filter_dict</span><span class="p">)</span>
    <span class="n">elastic_results</span> <span class="o">=</span> <span class="nf">elastic_search</span><span class="p">(</span><span class="n">index_name</span><span class="p">,</span> <span class="n">elastic_query</span><span class="p">,</span> <span class="n">es_client</span><span class="p">)</span>
    <span class="n">prompt</span> <span class="o">=</span> <span class="nf">build_prompt</span><span class="p">(</span><span class="n">query</span><span class="o">=</span><span class="n">query</span><span class="p">,</span> <span class="n">search_results</span><span class="o">=</span><span class="n">elastic_results</span><span class="p">)</span>
    <span class="n">response_res</span> <span class="o">=</span> <span class="nf">query_llm</span><span class="p">(</span><span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span> <span class="n">client</span><span class="o">=</span><span class="n">phi3_client</span><span class="p">,</span> <span class="n">model_name</span><span class="o">=</span><span class="n">model_name</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">response_res</span>
</code></pre></div></div> <p>Run Elasticsearch with RAG</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">json_doc_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">documents.json</span><span class="sh">'</span>
<span class="n">cvt_documents</span> <span class="o">=</span> <span class="nf">build_documents_from_json</span><span class="p">(</span><span class="n">json_doc_path</span><span class="p">)</span>
<span class="c1"># print(cvt_documents)
</span>
<span class="n">elasticsearch_url</span> <span class="o">=</span> <span class="sh">'</span><span class="s">http://localhost:9200</span><span class="sh">'</span>
<span class="n">index_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">course-questions2</span><span class="sh">"</span>
<span class="n">es_client</span> <span class="o">=</span> <span class="nf">build_elastic_search</span><span class="p">(</span><span class="n">elasticsearch_url</span><span class="p">,</span> <span class="n">cvt_documents</span><span class="p">,</span> <span class="n">index_name</span><span class="p">)</span>

<span class="n">num_results</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">text_boost_fields</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">question^3</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">section</span><span class="sh">"</span><span class="p">]</span>
<span class="n">query_type</span> <span class="o">=</span> <span class="sh">"</span><span class="s">best_fields</span><span class="sh">"</span>
<span class="c1"># keyword_fields = ["course"]
</span><span class="n">filter_dict</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">course</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">data-engineering-zoomcamp</span><span class="sh">'</span><span class="p">}</span>
<span class="n">elastic_query</span> <span class="o">=</span> <span class="nf">build_search_query</span><span class="p">(</span><span class="n">num_results</span><span class="o">=</span><span class="n">num_results</span><span class="p">,</span> <span class="n">query</span><span class="o">=</span><span class="n">query</span><span class="p">,</span> 
                                       <span class="n">text_boost_fields</span><span class="o">=</span><span class="n">text_boost_fields</span><span class="p">,</span>
                                       <span class="n">query_type</span><span class="o">=</span><span class="n">query_type</span><span class="p">,</span><span class="n">filter_dict</span><span class="o">=</span><span class="n">filter_dict</span><span class="p">)</span>

<span class="n">prompt</span> <span class="o">=</span> <span class="nf">build_prompt</span><span class="p">(</span><span class="n">query</span><span class="o">=</span><span class="n">query</span><span class="p">,</span> <span class="n">search_results</span><span class="o">=</span><span class="n">elastic_results</span><span class="p">)</span>
<span class="n">base_url</span> <span class="o">=</span> <span class="sh">'</span><span class="s">http://localhost:11434/v1/</span><span class="sh">'</span>
<span class="n">api_key</span> <span class="o">=</span> <span class="sh">'</span><span class="s">ollama</span><span class="sh">'</span>
<span class="n">model_name</span> <span class="o">=</span> <span class="sh">'</span><span class="s">phi3</span><span class="sh">'</span>
<span class="n">phi3_client</span> <span class="o">=</span> <span class="nf">build_llm</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">elastic_rag</span><span class="p">(</span><span class="n">query</span><span class="o">=</span> <span class="sh">'</span><span class="s">the course has already started, can I still enroll?</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div> <h3 id="whole-pipeline">Whole pipeline</h3> <p>The complete code is available at the following links:</p> <h4 id="simple-rag-with-minsearch">Simple RAG with Minsearch</h4> <p><a href="https://github.com/khoanta-ai/llm_zoomcamp/blob/main/01-intro/Simple_RAG_minsearch_clean.ipynb">https://github.com/khoanta-ai/llm_zoomcamp/blob/main/01-intro/Simple_RAG_minsearch_clean.ipynb</a></p> <h4 id="simple-rag-with-elasticsearch">Simple RAG with Elasticsearch</h4> <p><a href="https://github.com/khoanta-ai/llm_zoomcamp/blob/main/01-intro/Simple_RAG_elasticsearch_clean.ipynb">https://github.com/khoanta-ai/llm_zoomcamp/blob/main/01-intro/Simple_RAG_elasticsearch_clean.ipynb</a></p> <h2 id="other-information">Other Information</h2> <h3 id="ollama---running-llms-on-a-cpu">Ollama - Running LLMs on a CPU</h3> <h4 id="docker">Docker</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -it \
    -v ollama:/root/.ollama \
    -p 11434:11434 \
    --name ollama \
    ollama/ollama
</code></pre></div></div> <h4 id="forward-a-port">Forward a port</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Check the port in '-p 11434:11434', we get port after ':'.
- In Visual Studio Code, in the terminal, choose 'PORTS' tag, click 'Forward a Port' then add the '11434' port.
- Use command "docker ps" to find 'NAMES' of the ollama container.
</code></pre></div></div> <h4 id="pulling-the-model">Pulling the model</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker exec -it ollama bash
ollama pull phi3
</code></pre></div></div> <h4 id="testing">Testing</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://localhost:11434/api/chat <span class="nt">-d</span> <span class="s1">'{
  "model": "phi3",
  "messages": [
    { "role": "user", "content": "why is the sky blue?" }
  ]
}'</span>
</code></pre></div></div> <h3 id="elasticsearch-1">ElasticSearch</h3> <h4 id="run-elasticsearch-with-docker">Run ElasticSearch with Docker</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="se">\</span>
    <span class="nt">--rm</span> <span class="se">\</span>
    <span class="nt">--name</span> elasticsearch <span class="se">\</span>
    <span class="nt">-p</span> 9200:9200 <span class="se">\</span>
    <span class="nt">-p</span> 9300:9300 <span class="se">\</span>
    <span class="nt">-e</span> <span class="s2">"discovery.type=single-node"</span> <span class="se">\</span>
    <span class="nt">-e</span> <span class="s2">"xpack.security.enabled=false"</span> <span class="se">\</span>
    docker.elastic.co/elasticsearch/elasticsearch:8.4.3
</code></pre></div></div> <h4 id="index-settings">Index settings:</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "settings": {
        "number_of_shards": 1,
        "number_of_replicas": 0
    },
    "mappings": {
        "properties": {
            "text": {"type": "text"},
            "section": {"type": "text"},
            "question": {"type": "text"},
            "course": {"type": "keyword"} 
        }
    }
}
</code></pre></div></div> <h4 id="query">Query:</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "size": 5,
    "query": {
        "bool": {
            "must": {
                "multi_match": {
                    "query": query,
                    "fields": ["question^3", "text", "section"],
                    "type": "best_fields"
                }
            },
            "filter": {
                "term": {
                    "course": "data-engineering-zoomcamp"
                }
            }
        }
    }
}
</code></pre></div></div> <h4 id="configuration-elasticsearch-function">Configuration ElasticSearch Function</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">config_elastic_search</span><span class="p">():</span>
    <span class="n">index_settings</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">number_of_shards</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">number_of_replicas</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span>
        <span class="p">},</span>
        <span class="sh">"</span><span class="s">mappings</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">},</span>
                <span class="sh">"</span><span class="s">section</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">},</span>
                <span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">},</span>
                <span class="sh">"</span><span class="s">course</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">keyword</span><span class="sh">"</span><span class="p">}</span> 
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">index_settings</span>
</code></pre></div></div> <h4 id="building-search-query-elasticsearch-function">Building Search Query Elasticsearch Function</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">build_search_query</span><span class="p">(</span><span class="n">num_results</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span> <span class="n">text_boost_fields</span><span class="p">,</span> <span class="n">query_type</span><span class="p">,</span> <span class="n">filter_dict</span><span class="p">):</span>
    <span class="n">search_query</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">:</span> <span class="n">num_results</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">bool</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">must</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">multi_match</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">:</span> <span class="n">query</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">fields</span><span class="sh">"</span><span class="p">:</span> <span class="n">text_boost_fields</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="n">query_type</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">filter</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">term</span><span class="sh">"</span><span class="p">:</span> <span class="n">filter_dict</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">search_query</span>
</code></pre></div></div> ]]></content><author><name></name></author><category term="llms"/><category term="rag"/><category term="datatalks.club"/><category term="llm-zoomcamp"/><summary type="html"><![CDATA[In this module, we will learn what LLM and RAG are and implement a simple RAG pipeline to answer questions about the FAQ Documents from our Zoomcamp courses]]></summary></entry></feed>